{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "poolAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "stablecoin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "collateralToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "factory",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "depositTokenName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "depositTokenSymbol",
						"type": "string"
					}
				],
				"name": "PoolCreated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "allPools",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "stablecoin",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "collateralToken",
						"type": "address"
					},
					{
						"internalType": "contract TokenIface",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "contract EqualFiLPFactory",
						"name": "lpFactory",
						"type": "address"
					},
					{
						"internalType": "contract ITokenSwap",
						"name": "tokenSwap",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "depositCapAmount",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "depositTokenName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "depositTokenSymbol",
						"type": "string"
					}
				],
				"name": "createLendingPool",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A factory contract for creating and initializing new lending pools.      Each lending pool allows stablecoin deposits and borrowing against collateral.      This factory handles deploying the lending pool contract and setting initial parameters.",
			"events": {
				"PoolCreated(address,address,address,address,address,string,string)": {
					"details": "Emitted when a new lending pool is created and initialized.",
					"params": {
						"collateralToken": "The collateral token address for securing loans.",
						"depositTokenName": "The name of the deposit token for LP shares.",
						"depositTokenSymbol": "The symbol of the deposit token for LP shares.",
						"factory": "The address of the factory used to create LP tokens.",
						"poolAddress": "The address of the newly created lending pool contract.",
						"stablecoin": "The stablecoin address used in the lending pool.",
						"token": "The token interface for lending pool operations."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"createLendingPool(address,address,address,address,address,uint256,string,string)": {
					"details": "Creates a new lending pool and initializes it with the provided parameters.      The lending pool contract is deployed, roles are set, and the pool is initialized.",
					"params": {
						"collateralToken": "The collateral token address for securing loans in the pool.",
						"depositCapAmount": "The maximum amount of tokens that can be deposited in the pool.",
						"depositTokenName": "The name of the LP token representing deposit shares.",
						"depositTokenSymbol": "The symbol of the LP token representing deposit shares.",
						"lpFactory": "The address of the LP token factory contract for minting deposit tokens.",
						"stablecoin": "The stablecoin address for the lending pool.",
						"token": "The token interface with burn functionality used in the lending pool."
					},
					"returns": {
						"_0": "address The address of the newly created lending pool contract."
					}
				}
			},
			"title": "EqualFiLendingPoolFactory",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/LendingPoolFactory.sol": "EqualFiLendingPoolFactory"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": [
			":@ensdomains/=lib/v4-core/node_modules/@ensdomains/",
			":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
			":@uniswap/v3-core/=lib/v3-core/",
			":@uniswap/v3-periphery/=lib/v3-periphery/",
			":ds-test/=lib/forge-std/lib/ds-test/src/"
		]
	},
	"sources": {
		"lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
			"keccak256": "0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308",
			"license": "MIT",
			"urls": [
				"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80",
				"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z"
			]
		},
		"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
			"keccak256": "0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606",
			"license": "MIT",
			"urls": [
				"bzz-raw://fd54abb96a6156d9a761f6fdad1d3004bc48d2d4fce47f40a3f91a7ae83fc3a1",
				"dweb:/ipfs/QmUrFSGkTDJ7WaZ6qPVVe3Gn5uN2viPb7x7QQ35UX4DofX"
			]
		},
		"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
			"license": "MIT",
			"urls": [
				"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
				"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xbf61ab2ae1d575a17ea58fbb99ca232baddcc4e0eeea180e84cbc74b0c348b31",
			"license": "MIT",
			"urls": [
				"bzz-raw://4e0968705bad99747a8e5288aa008678c2be2f471f919dce3925a3cc4f1dee09",
				"dweb:/ipfs/QmbAFnCQfo4tw6ssfQSjhA5LzwHWNNryXN8bX7ty8jiqqn"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
			"license": "MIT",
			"urls": [
				"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
				"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a",
				"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287",
				"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
				"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
			]
		},
		"src/ERC20Factory.sol": {
			"keccak256": "0xc7346f23db7b64fe40469d1d2b0edd99204ec7178c9b3eed54a5a35678740261",
			"license": "MIT",
			"urls": [
				"bzz-raw://b645f131589ffd55cdd537ccd8b7c1fdf14a6ebe6a57e8bbe531bdaa312f1af0",
				"dweb:/ipfs/QmRmzc467bCii1QmBDUWsw5F7K1nGXKrenbNuG5a5KyLP8"
			]
		},
		"src/LPToken.sol": {
			"keccak256": "0x596c5e0ed757dc6d81c0863bd1faa01acfeafd3c6f9c4e0d4b5c2a2cb4b5cce3",
			"license": "MIT",
			"urls": [
				"bzz-raw://a8999746ffc9eab9eac520eb6dec48a32b5db7a33b76e6397bbf564747e68d36",
				"dweb:/ipfs/Qmd6mEej88xQGe3GFkcoqtYGC7FV47kvQ5PES3KhNvWVVw"
			]
		},
		"src/LendingPoolFactory.sol": {
			"keccak256": "0xc879077f274026e83811639ed45d75bca903cde531f187d9b4adcd644f6e00a0",
			"license": "MIT",
			"urls": [
				"bzz-raw://937aa61aae6934fc5f3dadcc20a9158ed7373207957e6626143145632fa0ad96",
				"dweb:/ipfs/QmPZZNVotNeSfee9Fk7aYbFVwrVB4sKEszmdYFA6U9jLY6"
			]
		},
		"src/loans16.sol": {
			"keccak256": "0x7352e941def447a1578d0dd2eba6a377fd27a1f93d6c1656d9c5415ac1fb1786",
			"license": "MIT",
			"urls": [
				"bzz-raw://8792621c63c52b0bb3e44ad188f19bfbffddfba967322443f5d4b56ee6ba54b1",
				"dweb:/ipfs/QmQkkPEsZUVCePckw5h8WQWJYXK2AAf7zeotdC4TFFe4Nr"
			]
		}
	},
	"version": 1
}